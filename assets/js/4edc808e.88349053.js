"use strict";(self.webpackChunkcorev_cli_docs=self.webpackChunkcorev_cli_docs||[]).push([[308],{3101:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>a,contentTitle:()=>d,default:()=>p,frontMatter:()=>l,metadata:()=>s,toc:()=>h});const s=JSON.parse('{"id":"index","title":"Home","description":"<ThemedImage","source":"@site/docs/index.mdx","sourceDirName":".","slug":"/","permalink":"/","draft":false,"unlisted":false,"editUrl":"https://github.com/doguabaris/corev-cli-docs/edit/main/docs/index.mdx","tags":[],"version":"current","frontMatter":{"id":"index","title":"Home"},"sidebar":"sidebar","next":{"title":"Usage","permalink":"/usage"}}');var t=i(4848),o=i(8453),r=i(9030),c=i(9324);const l={id:"index",title:"Home"},d="Corev-CLI",a={},h=[{value:"Prerequisites",id:"prerequisites",level:2},{value:"Installation",id:"installation",level:2},{value:"Available commands",id:"available-commands",level:2},{value:"Quick start",id:"quick-start",level:2},{value:"1. Initialize once:",id:"1-initialize-once",level:3},{value:"2. Pull latest config for a project:",id:"2-pull-latest-config-for-a-project",level:3},{value:"3. Push local config file:",id:"3-push-local-config-file",level:3},{value:"4. Diff two config files:",id:"4-diff-two-config-files",level:3},{value:"5. List versions (based on filenames):",id:"5-list-versions-based-on-filenames",level:3},{value:"API specification",id:"api-specification",level:2},{value:"1 The <code>getLatestConfig()</code> method",id:"1-the-getlatestconfig-method",level:3},{value:"2 The <code>uploadConfig()</code> method",id:"2-the-uploadconfig-method",level:3},{value:"3 The <code>Configuration</code> dictionary",id:"3-the-configuration-dictionary",level:3},{value:"4 The <code>UploadResponse</code> dictionary",id:"4-the-uploadresponse-dictionary",level:3},{value:"File naming",id:"file-naming",level:3},{value:"JSON schema",id:"json-schema",level:3},{value:"HTTP mapping",id:"http-mapping",level:3},{value:"Testing",id:"testing",level:2}];function j(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,o.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(c.A,{alt:"Corev CLI banner",sources:{light:(0,r.Ay)("/img/home-header-light.svg"),dark:(0,r.Ay)("/img/home-header-dark.svg")}}),"\n",(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"corev-cli",children:"Corev-CLI"})}),"\n",(0,t.jsx)(n.p,{children:"A minimal CLI tool for managing versioned configuration repositories. Built to pull, push, diff, and list config files across distributed environments. Ideal for systems where settings must be easily maintainable, versioned, and auditable."}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.a,{href:"https://www.producthunt.com/posts/corev-cli?embed=true&utm_source=badge-featured&utm_medium=badge&utm_souce=badge-corev-cli",children:(0,t.jsx)(n.img,{src:"https://api.producthunt.com/widgets/embed-image/v1/featured.svg?post_id=952597&theme=dark",alt:"Product Hunt"})})}),"\n",(0,t.jsx)(n.h2,{id:"prerequisites",children:"Prerequisites"}),"\n",(0,t.jsx)(n.admonition,{title:"Beware",type:"note",children:(0,t.jsxs)(n.p,{children:['Corev-CLI is not a "plug-and-play" package. It only works if there\u2019s an API that follows the ',(0,t.jsx)(n.a,{href:"#api-specification",children:"API specification"}),".\nIt uses this API to ",(0,t.jsx)(n.code,{children:"pull"})," and ",(0,t.jsx)(n.code,{children:"push"})," config files. Without it, the CLI does nothing."]})}),"\n",(0,t.jsx)(n.h2,{id:"installation",children:"Installation"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"npm i -g @corev/cli\n"})}),"\n",(0,t.jsx)(n.h2,{id:"available-commands",children:"Available commands"}),"\n",(0,t.jsxs)(n.p,{children:["Corev-CLI provides a small set of core commands to help you get things done. Files are stored in the ",(0,t.jsx)(n.code,{children:"configs/"})," folder for quick and offline access."]}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Action"}),(0,t.jsx)(n.th,{children:"Description"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"init"})}),(0,t.jsx)(n.td,{children:"Set the API endpoint used by the CLI"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"pull"})}),(0,t.jsx)(n.td,{children:"Fetch the latest config for a project"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"push"})}),(0,t.jsx)(n.td,{children:"Upload a local config file to the server"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"diff"})}),(0,t.jsx)(n.td,{children:"Show differences between two config versions"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"list"})}),(0,t.jsx)(n.td,{children:"List all available config versions by filename"})]})]})]}),"\n",(0,t.jsx)(n.h2,{id:"quick-start",children:"Quick start"}),"\n",(0,t.jsx)(n.h3,{id:"1-initialize-once",children:"1. Initialize once:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"corev init --api http://localhost:3000\n"})}),"\n",(0,t.jsxs)(n.p,{children:["This saves your API endpoint to ",(0,t.jsx)(n.code,{children:"configs/.corevrc.json"}),"."]}),"\n",(0,t.jsx)(n.h3,{id:"2-pull-latest-config-for-a-project",children:"2. Pull latest config for a project:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"corev pull <project>\n"})}),"\n",(0,t.jsx)(n.h3,{id:"3-push-local-config-file",children:"3. Push local config file:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"corev push configs/atlas@1.0.1.json\n"})}),"\n",(0,t.jsx)(n.h3,{id:"4-diff-two-config-files",children:"4. Diff two config files:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"corev diff configs/atlas@1.0.0.json configs/atlas@1.0.1.json\n"})}),"\n",(0,t.jsx)(n.h3,{id:"5-list-versions-based-on-filenames",children:"5. List versions (based on filenames):"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"corev list\n"})}),"\n",(0,t.jsx)(n.h2,{id:"api-specification",children:"API specification"}),"\n",(0,t.jsxs)(n.p,{children:["This section defines the contract that an API endpoint must implement to be compliant with Corev-CLI. The specification is divided into two main parts: the methods (belonging to the ",(0,t.jsx)(n.code,{children:"ConfigService"})," interface) and the dictionaries (",(0,t.jsx)(n.code,{children:"Configuration"})," and ",(0,t.jsx)(n.code,{children:"UploadResponse"}),")."]}),"\n",(0,t.jsxs)(n.h3,{id:"1-the-getlatestconfig-method",children:["1 The ",(0,t.jsx)(n.code,{children:"getLatestConfig()"})," method"]}),"\n",(0,t.jsxs)(n.p,{children:["Belongs to the ",(0,t.jsx)(n.strong,{children:"Corev ConfigService conformance class"}),".\nExpects a single argument, ",(0,t.jsx)(n.code,{children:"projectName"}),", which identifies the project. It returns a promise that resolves with a ",(0,t.jsx)(n.code,{children:"Configuration"})," object containing the latest configuration for that project."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-webidl",children:"partial interface ConfigService {\n  Promise<Configuration> getLatestConfig(DOMString projectName);\n};\n"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Behavior:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["When this method is invoked, the implementation MUST retrieve the latest configuration from storage (or memory) and return it as a ",(0,t.jsx)(n.code,{children:"Configuration"})," object."]}),"\n",(0,t.jsx)(n.li,{children:"If the project is not found, the promise SHOULD reject with an appropriate error."}),"\n"]}),"\n",(0,t.jsxs)(n.h3,{id:"2-the-uploadconfig-method",children:["2 The ",(0,t.jsx)(n.code,{children:"uploadConfig()"})," method"]}),"\n",(0,t.jsxs)(n.p,{children:["Belongs to the ",(0,t.jsx)(n.strong,{children:"Corev ConfigService conformance class"}),".\nExpects two arguments:"]}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"projectName"})," \u2014 a DOMString specifying the project."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"config"})," \u2014 a ",(0,t.jsx)(n.code,{children:"Configuration"})," object to be stored or updated."]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-webidl",children:"partial interface ConfigService {\n  Promise<UploadResponse> uploadConfig(DOMString projectName, Configuration config);\n};\n"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Behavior:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["When this method is invoked, the implementation MUST store or update the configuration for the specified project, then return an ",(0,t.jsx)(n.code,{children:"UploadResponse"})," indicating success or error."]}),"\n",(0,t.jsxs)(n.li,{children:["If a duplicate or lower version of a configuration is not allowed by policy, this method SHOULD reject with a ",(0,t.jsx)(n.code,{children:"409 Conflict"}),"-like error or return an appropriate error response in the ",(0,t.jsx)(n.code,{children:"UploadResponse"}),"."]}),"\n"]}),"\n",(0,t.jsxs)(n.h3,{id:"3-the-configuration-dictionary",children:["3 The ",(0,t.jsx)(n.code,{children:"Configuration"})," dictionary"]}),"\n",(0,t.jsx)(n.p,{children:"Represents the structure of a project configuration object."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-webidl",children:'dictionary Configuration {\n  required DOMString name;      // Project name (e.g., "atlas")\n  required DOMString version;   // Version string (e.g., "1.0.0")\n  required any config;          // JSON object with configuration data\n};\n'})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Usage notes:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"name"}),' typically matches the project identifier (e.g., "atlas").']}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"version"}),' can be any string representing a version (e.g., "1.0.0", "2025.04.13-alpha", etc.).']}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"config"})," is an arbitrary JSON-like structure containing key-value pairs relevant to the configuration."]}),"\n"]}),"\n",(0,t.jsxs)(n.h3,{id:"4-the-uploadresponse-dictionary",children:["4 The ",(0,t.jsx)(n.code,{children:"UploadResponse"})," dictionary"]}),"\n",(0,t.jsx)(n.p,{children:"Defines the response returned after a successful (or failed) configuration upload."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-webidl",children:'dictionary UploadResponse {\n  required DOMString status;    // "success" or "error"\n  DOMString? message;           // Optional message with details\n};\n'})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Usage notes:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"status"})," MUST be either ",(0,t.jsx)(n.code,{children:'"success"'})," or ",(0,t.jsx)(n.code,{children:'"error"'}),"."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"message"})," MAY be provided to give further context, such as error details or confirmations."]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"file-naming",children:"File naming"}),"\n",(0,t.jsx)(n.p,{children:"All configuration files must follow this naming convention:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"<project>@<version>.json\n"})}),"\n",(0,t.jsx)(n.p,{children:"Example:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"configs/atlas@1.0.0.json\n"})}),"\n",(0,t.jsx)(n.h3,{id:"json-schema",children:"JSON schema"}),"\n",(0,t.jsx)(n.p,{children:"Every configuration file must conform to the JSON schema below, which precisely defines the required structure and fields:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'{\n\t"type": "object",\n\t"properties": {\n\t\t"name": {\n\t\t\t"type": "string"\n\t\t},\n\t\t"version": {\n\t\t\t"type": "string"\n\t\t},\n\t\t"config": {\n\t\t\t"type": "object",\n\t\t\t"additionalProperties": true\n\t\t}\n\t},\n\t"required": ["name", "version", "config"],\n\t"additionalProperties": false\n}\n'})}),"\n",(0,t.jsx)(n.h3,{id:"http-mapping",children:"HTTP mapping"}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"HTTP Method"}),(0,t.jsx)(n.th,{children:"Endpoint URL"}),(0,t.jsx)(n.th,{children:"WebIDL Method"}),(0,t.jsx)(n.th,{children:"Expected Response"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"GET"}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"/configs/:project/latest"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"ConfigService.getLatestConfig(projectName)"})}),(0,t.jsxs)(n.td,{children:[(0,t.jsx)(n.code,{children:"Configuration"})," object"]})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"POST"}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"/configs/:project"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"ConfigService.uploadConfig(projectName, config)"})}),(0,t.jsxs)(n.td,{children:[(0,t.jsx)(n.code,{children:"UploadResponse"})," object"]})]})]})]}),"\n",(0,t.jsx)(n.h2,{id:"testing",children:"Testing"}),"\n",(0,t.jsx)(n.p,{children:"Start the mock API:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"node tests/mock-api.mjs\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Then run CLI commands while targeting ",(0,t.jsx)(n.code,{children:"http://localhost:3000"}),"."]})]})}function p(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(j,{...e})}):j(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>r,x:()=>c});var s=i(6540);const t={},o=s.createContext(t);function r(e){const n=s.useContext(o);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:r(e.components),s.createElement(o.Provider,{value:n},e.children)}}}]);